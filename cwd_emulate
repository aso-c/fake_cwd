/*!
 * @brief Emulate "current directory" path for operating with file system
 * Header Include file
 * 	@file	cwd_emulate
 *	@author	(Solomatov A.A. (aso)
 *	Created	27.04.2024
 *	Version	0.3
 */



#pragma once


#ifndef __cplusplus
#error "The sdcard_ctrl file usable in C++ projects only."
#endif



/// Text representation mode of statbuf (directory entry information)
inline constexpr const char* statmode2txt(const struct stat& statbuf)
{
    return (S_ISLNK(statbuf.st_mode))? "symlink":
	    (S_ISDIR(statbuf.st_mode))? "directory":
	    (S_ISCHR(statbuf.st_mode))? "character device":
	    (S_ISBLK(statbuf.st_mode))? "block device":
	    (S_ISFIFO(statbuf.st_mode))? "FIFO channel":
	    (S_ISSOCK(statbuf.st_mode))? "socket":
					"(unknown type)";
}; /* statmode2txt() */


// if path - is absolute path
inline bool absolute_path(const char path[]) { return (path[0] == '/'); };
inline bool absolute_path(const std::string& path) { return !path.empty() && (path.front() == '/'); };


namespace fs	//-----------------------------------------------------------------------------------------------------
{

    class CWD_emulating
    {
    public:
//	CWD_emulating(char cwdbuff[], size_t cwdbufflen):
	CWD_emulating(char cwdbuff[], size_t cwdbufflen):
	    pwd(cwdbuff), pwd_bufflen(cwdbufflen) {/*esp_log_level_set("CWD_emulating:", ESP_LOG_DEBUG);*//* for debug purposes */};

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wnonnull"
	// get current dir (if path == NULL or "") or generate fullpath for sended path
	// absent trailing slash in returned string is guaranteed
	// return current pwd (current dir) only
//	char* get();
	std::string get();
	// return full path appling current dir
//	char* compose(const char path[]) { ESP_LOGD(__PRETTY_FUNCTION__, "\"path\" argument is %s", path);
	std::string compose(const std::string& path) { ESP_LOGD(__PRETTY_FUNCTION__, "\"path\" argument is %s", path.c_str());
	    ESP_LOGD(__PRETTY_FUNCTION__, "\"len\" argument is zero");
	    return compose(path, path.length()/*strlen(path)*/);
	};
	// compose the full path from the current directory with addition specified part of the passed path
//	char* compose(const char path[], size_t);
	std::string compose(const std::string&, size_t);
//	char* get(const char path[], size_t);
#pragma GCC diagnostic pop
	// raw get path with current dir:
	// only concatenate path with current dir,
	// not processing output with realpath().
	char* raw_compose(const char path[] = nullptr);
	// get current operative path buffer - previous stored path on it
	char* current() {return operative_path_buff;};
	// the pwd dir is root?
//	bool is_root(const std::string& str) const { return (str == "/");};
	static bool is_root(const std::string& str) { return (str == "/"); };
	bool is_root() const { return is_root(pwd)/*(strcmp(pwd, "/") == 0)? true: false*/;};
	// change cwd dir
//	esp_err_t change(const char path[]);
	esp_err_t change(const std::string& path);
	char* clearbuff() {operative_path_buff[0] = '\0'; return operative_path_buff;};	// clear operative path buffer - set it's value to ""

	/// @brief Path validation - whatever the path exist or not -
	/// any subpath is a valid existing path
	/// @note method can modify fake_cwd::operative_path_buf
	bool valid(const char[]);


    private:

	char* const pwd;	// pointer to cwd buffer
	const size_t pwd_bufflen;
	static char operative_path_buff[PATH_MAX];	/// temporary buffer for file fullpath composing

    }; /* CWD_emulating */


}; //--[ namespace fs ]------------------------------------------------------------------------------------------------


//--[ cwd_emulate ]----------------------------------------------------------------------------------------------------
